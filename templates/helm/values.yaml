# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
# TODO: Remove any extra comment blocks and unused variable values.

# Number of running Pods managed by this Helm chart's Deployment resource.
# If using autoscaling, comment or remove this value.
replicaCount: 1

# Configure a HorizontalPodAutoscaler resource for this Helm chart's Deployment resource.
# Set autoscaling.enabled to true to enable this functionality. If using this resource,
# either choose to scale by targetCPUUtilizationPercentage or targetMemoryUtilizationPercentage
# based on how you want the Deployment to scale, and comment or remove the other value option.
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# The Docker image reference which this Helm chart will run.
# TODO: Ensure the repository/image name is correct.
image:
  repository: "harbor.devops.k8s.rcsb.org/rcsb/example_application"
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

# externalSecret defines values for the ExternalSecret resource if your application needs to pull values
# from an external Vault service.
# TODO: Review externalSecret values as required.
externalSecret:
  enabled: false
  secretStoreRefName: "rcsb-vault"
  targets:
    - secretName: # Name of the secret resource to create in K8s
      data: {}
      #  - secretKey: key_name_to_create_in_Secret_k8s_resource
      #    remoteRef:
      #      key: vault_engine_name/secret_name
      #      property: name_of_key_of_secret_in_vault

# imagePullSecrets is the Secret resource which contains the credentials to connect to Docker
# to pull images from private Harbor projects. If the image for your Helm chart is not from a
# private Harbor project, you can exclude this value. Otherwise, leave this value as is.
imagePullSecrets: "harbor-docker-registry-conf"

deploymentStrategy:
  #https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
  #Type is either RollingUpdate or Recreate
  type: "RollingUpdate"
  #For rolling update, what percentage of total pods can be created above desired amount
  maxSurge: 25%
  #For rolling update, what percentage of total pods can be brought down to update
  maxUnavailable: 25%

# securityContext sets the container security values of the Pod. These default values are the recommended
# values for all applications. Adjust as needed for your application purposes, but be aware of the security
# implications from these changes.
securityContext:
  capabilities:
    drop:
      - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000

# Define container liveness and readiness checks
# A Pod is considered "live" when it is able to respond to client requests.
# A Pod is considered "ready" when it has completed initialization and should be one of the backends for a K8s Service resource.
# TODO: Enable/disable probes as required, and set appropriate values.
livenessProbe:
  enable: true
  initialDelaySeconds: 300
  periodSeconds: 30
  failureThreshold: 6
  http:
    path: /
readinessProbe:
  enable: true
  initialDelaySeconds: 300
  periodSeconds: 30
  failureThreshold: 6
  http:
    path: /

# service declares the type of Service resource to be created, as well as the target port of the Pod to send requests.
service:
  type: ClusterIP
  port: 80

# ingress declares the Ingress resource to be created and allow access to the service from the external internet.
# Set ingress.enabled to true to create this Ingress resource. Double-check the host values for your application.
# TODO: Review ingress values.
ingress:
  enabled: false
  className: "haproxy"
  annotations: {}
    # cert-manager.io/cluster-issuer: rutgers-acme
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: example-application.k8s.rcsb.org
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: example-application-tls
  #    hosts:
  #      - example-application.k8s.rcsb.org

# Define resource limits for your application. Especially important if you enable autoscaling for this Helm chart.
# Deploy without limits first to test the application performance, then tune afterwards to ensure that autoscaling
# will work as expected.
# TODO: Review resource limit values.
resources: {}
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# usePersistentVolume if your application requires a persistent volume resource for data storage.
# TODO: Review persistent volume values as required.
usePersistentVolume: false
# persistentVolumeMountPath defines the local path within the container where the persistent volume will be mounted.
persistentVolumeMountPath: ""
persistentVolumeReadOnly: true
rookCeph:
  metadataPoolSize: 3
  dataPoolSize: 3
  preserveFilesystemOnDelete: false
  # reclaimPolicy are either Delete or Retain. See https://kubernetes.io/docs/concepts/storage/persistent-volumes/#reclaiming
  reclaimPolicy: Retain
  allowVolumeExpansion: true
  pvcRequestStorageSize: 50G
  pvcAccessModes:
    - ReadWriteMany

# useSecretsVolume if your application will mount a secret from the Vault service as a file on the filesystem.
useSecretsVolume: false
secretVolumes: {}
#  - name: Name of the volume reference in the Deployment resource
#    mountPath: Full path in the container to mount the secret file
#    filename: The filename of the secret file to mount
#    secretName: Name of the Secret resource in K8s

# appConfigs defines ConfigMap resources which are mounted into the container environment as a file.
useAppConfigs: false
appConfigs: {}
#  example.log4j.xml:
#    mountPath: Full path in the container to mount this config file
#    filename: The filename of the config file to mount
#    value: |-
#      <example>
#        Can be any other file types besides xml as well!
#      </example>