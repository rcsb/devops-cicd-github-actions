name: Release

on:
  workflow_call:
    inputs:
      major:
        description: 'Major version'
        type: string
        required: true
      minor:
        description: 'Minor version'
        type: string
        required: true
      patch:
        description: 'Patch version'
        type: string
        required: true
      extra-tags:
        description: 'Extra tags to be used when pushing the image to image repo. Comma separated list. A tag with major.minor.patch will always be created.'
        type: string
        required: false
      skip-tests:
        description: 'Skip tests'
        type: boolean
        default: true
        required: false
      distribution:
        description: 'buildlocker distribution name'
        type: string
        required: true
      type:
        description: 'buildlocker distribution type [war|jar*]'
        type: string
        required: false
env:
  VERSION_TAG: "${{ inputs.major }}.${{ inputs.minor }}.${{ inputs.patch }}"

jobs:
  run-tests:
    if: inputs.skip-tests != true
    uses: rcsb/devops-cicd-github-actions/.github/workflows/run-tests.yaml@master
  call-update-version:
    uses: rcsb/devops-cicd-github-actions/.github/workflows/update-version.yaml@master
    with:
      major: "${{ inputs.major }}"
      minor: "${{ inputs.minor }}"
      patch: "${{ inputs.patch }}"
  call-build-and-push-docker:
    uses: rcsb/devops-cicd-github-actions/.github/workflows/build-and-push-docker.yaml@master
    with:
      # build the tags comma separated string. No idea how people did this before ChatGPT
      # e.g.
      #   if VERSION_TAG=1.2.3 and extra-tags='' then this will give '1.2.3'
      #   if VERSION_TAG=1.2.3 and extra-tags='myextratag' then this will give '1.2.3,myextratag'
      tag: ${{ env.VERSION_TAG }}${{ inputs.extra-tags && format(',{0}', inputs.extra-tags) || '' }}
  call-deploy-to-build-locker:
    needs:
      - call-build-and-push-docker
    uses: rcsb/devops-cicd-github-actions/.github/workflows/deploy-to-buildlocker.yaml@master
    with:
      distribution: "${{ inputs.distribution }}"
      type: "${{ inputs.type }}"