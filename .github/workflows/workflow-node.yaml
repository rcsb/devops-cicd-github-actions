name: Node Workflow
# Standard workflow for any NodeJS based projects.

on:
  workflow_call:
    inputs:
      mainline_branch:
        type: string
        default: format('refs/heads/{0}', github.event.repository.default_branch)
        description: "The mainline branch for the repo. Deployments to the staging and production environments are done only on push to this branch. Defaults to the repo's default branch."
      repo_url:
        type: string
        default: "harbor.devops.k8s.rcsb.org"
        description: "The URL of the remote Docker image repository."
      repo_project:
        type: string
        required: true
        description: "The name of the project or organization in the remote Docker image repository."
      docker_image_name:
        type: string
        required: true
        description: "The name of the Docker image to create."
      do_staging_build:
        type: boolean
        default: true
        description: "Build, tag, and push a docker image with the staging tag."
      restart_staging_deployment:
        type: boolean
        default: true
        description: "Restart the staging K8s deployments for this application."
      staging_k8s_deployment_name:
        type: string
        required: false
        description: "The name of the deployment in the K8s staging namespace to restart."
      do_production_build:
        type: boolean
        default: true
        description: "Build, tag, and push a docker image with the production tag."
      restart_production_deployment:
        type: boolean
        default: true
        description: "Restart the production K8s deployment for this application."
      production_k8s_deployment_name:
        type: string
        required: false
        description: "The names of the deployment in the K8s production namespace to restart."
  workflow_dispatch:
    inputs:
      mainline_branch:
        type: string
        default: format('refs/heads/{0}', github.event.repository.default_branch)
        description: "The mainline branch for the repo. Deployments to the staging and production environments are done only on push to this branch. Defaults to the repo's default branch."
      repo_url:
        type: string
        default: "harbor.devops.k8s.rcsb.org"
        description: "The URL of the remote Docker image repository."
      repo_project:
        type: string
        required: true
        description: "The name of the project or organization in the remote Docker image repository."
      docker_image_name:
        type: string
        required: true
        description: "The name of the Docker image to create."
      do_staging_build:
        type: boolean
        default: true
        description: "Build, tag, and push a docker image with the staging tag."
      restart_staging_deployment:
        type: boolean
        default: false
        description: "Restart the staging K8s deployments for this application."
      staging_k8s_deployment_name:
        type: string
        required: false
        description: "The name of the deployment in the K8s staging namespace to restart."
      do_production_build:
        type: boolean
        default: false
        description: "Build, tag, and push a docker image with the production tag."
      restart_production_deployment:
        type: boolean
        default: false
        description: "Restart the production K8s deployment for this application."
      production_k8s_deployment_name:
        type: string
        required: false
        description: "The names of the deployment in the K8s production namespace to restart."

jobs:
  # Build jobs
  build_npm:
    name: "Build via NPM"
    uses: ./.github/workflows/run_npm.yaml
    with:
      script: "build"
  lint_npm:
    name: "Lint via NPM"
    uses: ./.github/workflows/run_npm.yaml
    with:
      script: "lint"
  lint_docker:
    name: "Lint Dockerfile"
    uses: ./.github/workflows/lint_docker.yaml
  # Test jobs
  test_npm:
    name: "Run unit tests via NPM"
    needs:
      - build_npm
      - lint_npm
      - lint_docker
    uses: ./.github/workflows/run_npm.yaml
    with:
      script: "test"
  build_docker:
    name: "Build docker image"
    needs:
      - build_npm
      - lint_npm
      - lint_docker
    uses: ./.github/workflows/build_docker.yaml
    with:
      repo_url: "${{ inputs.repo_url }}"
      repo_project: "${{ inputs.repo_project }}"
      docker_image_name: "${{ inputs.docker_image_name }}"
  # Staging jobs
  build_docker_staging:
    name: "Push docker image with staging tag"
    if: (${{ inputs.do_staging_build }}) && (github.ref == "refs/heads/${{ inputs.mainline_branch }}") && (github.event_name != 'pull_request')
    needs:
      - test_npm
      - build_docker
    uses: ./.github/workflows/retag_docker.yaml
    with:
      repo_url: "${{ inputs.repo_url }}"
      repo_project: "${{ inputs.repo_project }}"
      docker_image_name: "${{ inputs.docker_image_name }}"
      old_tag: "${{ github.ref_name }}"
      new_tag: "staging"
  restart_staging_k8s_deployment:
    name: "Restart deployment in K8s staging namespace"
    if: (${{ inputs.restart_staging_deployment }}) && (${{ inputs.staging_k8s_deployment_name != "" }}) && (github.ref == "refs/heads/${{ inputs.mainline_branch }}") && (github.event_name != 'pull_request')
    needs:
      - build_docker_staging
    uses: ./.github/workflows/restart_k8s_deployment.yaml
    with:
      deployment_name: "${{ inputs.staging_k8s_deployment_name }}"
      namespace: "staging"
  # Production jobs
  build_docker_production:
    name: "Push docker image with production tag"
    if: (${{ inputs.do_production_build }}) && (github.ref == "refs/heads/${{ inputs.mainline_branch }}") && (github.event_name != 'pull_request')
    needs:
      - build_docker_staging
    uses: ./.github/workflows/retag_docker.yaml
    with:
      repo_url: "${{ inputs.repo_url }}"
      repo_project: "${{ inputs.repo_project }}"
      docker_image_name: "${{ inputs.docker_image_name }}"
      old_tag: "${{ github.ref_name }}"
      new_tag: "production"
  restart_production_k8s_deployment:
    name: "Restart deployment in K8s production namespace"
    if: (${{ inputs.restart_production_deployment }}) && (${{ inputs.production_k8s_deployment_name != "" }}) && (github.ref == "refs/heads/${{ inputs.mainline_branch }}") && (github.event_name != 'pull_request')
    needs:
      - build_docker_production
    uses: ./.github/workflows/restart_k8s_deployment.yaml
    with:
      deployment_name: "${{ inputs.production_k8s_deployment_name }}"
      namespace: "production"