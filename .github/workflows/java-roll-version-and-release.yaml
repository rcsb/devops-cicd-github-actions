# A workflow to find the current version from pom and then commit the release version (with tag) and the next dev cycle version
name: Roll maven version and release
on:
  workflow_call:
    inputs:
      # TODO remove these 2 params once we are out of OpenStack and build-locker build is not needed anymore
      distribution:
        description: 'buildlocker distribution name'
        type: string
        required: true
      type:
        description: 'buildlocker distribution type [war|jar*]. Use any other value to skip pushing to build-locker'
        type: string
        required: false


jobs:
  extract:
    name: extract-version
    runs-on:
      - self-hosted
      - java
    outputs:
      major: ${{ steps.major.outputs.major }}
      minor: ${{ steps.minor.outputs.minor }}
      patch: ${{ steps.patch.outputs.patch }}
    steps:
      - uses: actions/checkout@v4
      - id: major
        run: |
          echo "major=$(mvn --quiet build-helper:parse-version help:evaluate -Dexpression=parsedVersion.majorVersion -DforceStdout --no-transfer-progress)" >> $GITHUB_OUTPUT
      - id: minor
        run: |
          echo "minor=$(mvn --quiet build-helper:parse-version help:evaluate -Dexpression=parsedVersion.minorVersion -DforceStdout --no-transfer-progress)" >> $GITHUB_OUTPUT
      - id: patch
        run: |
          echo "patch=$(mvn --quiet build-helper:parse-version help:evaluate -Dexpression=parsedVersion.incrementalVersion -DforceStdout --no-transfer-progress)" >> $GITHUB_OUTPUT
      - id: echo-version
        run: |
          echo ${{steps.major.outputs.major}}.${{steps.minor.outputs.minor}}.${{steps.patch.outputs.patch}}
  update-version-commit:
    needs: extract
    env:
      NEW_VERSION: ${{ needs.extract.outputs.major }}.${{ needs.extract.outputs.minor }}.${{ needs.extract.outputs.patch }}
    runs-on:
      - self-hosted
      - java
    steps:
      - run: echo "NEW_VERSION=$NEW_VERSION"
      - uses: actions/checkout@v4
      - name: Setup git author information
        run: |
          git config user.name RCSBSystem
          git config user.email it@rcsb.org
      - run: mvn --version
      - name: Set version
        run: mvn versions:set -DnewVersion=$NEW_VERSION --no-transfer-progress
      - name: Commit and tag new version (release commit)
        run: |
          git add $(find . -name "pom.xml")
          git commit -m "[actions] Updated version in pom.xml to $NEW_VERSION"
          git tag $NEW_VERSION
      - name: Push back to GitHub
        # Note we must push or otherwise next job won't have the commit (every job starts from scratch)
        run: |
          git push --all
          git push origin $NEW_VERSION

  build_jib_production:
    name: "Build docker image via jib with tags: production,<VERSION>"
    # note we must explicitly declare extract as a dep to use its outputs
    needs:
      - update-version-commit
      - extract
    runs-on:
      - self-hosted
      - java
    # NOTE: by default checkout will get the revision at workflow trigger time. Here we want the latest (including commits from previous jobs), that's why we need the fetch-depth and pull
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Pull latest changes
        run: |
          git pull origin ${{ github.ref_name }}
      - name: Jib build and push production image
        run: |
          echo "Jib build and push with tags production,${{ needs.extract.outputs.major }}.${{ needs.extract.outputs.minor }}.${{ needs.extract.outputs.patch }}"
          mvn package jib:build -Djib.to.tags=production,${{ needs.extract.outputs.major }}.${{ needs.extract.outputs.minor }}.${{ needs.extract.outputs.patch }} -Djib.target.namespace=rcsb --no-transfer-progress -Dmaven.test.skip=true -Djib.httpTimeout=0

  # TODO remove once we are out of OpenStack and build-locker artifacts are not needed anymore
  call-deploy-to-build-locker:
    needs: update-version-commit
    uses: ./.github/workflows/deploy-to-buildlocker.yaml
    with:
      distribution: "${{ inputs.distribution }}"
      type: "${{ inputs.type }}"

  next-dev-cycle-commit:
    # note we must explicitly declare extract as a dep to use its outputs
    needs:
      - call-deploy-to-build-locker
      - build_jib_production
      - extract
    env:
      NEW_VERSION: ${{ needs.extract.outputs.major }}.${{ needs.extract.outputs.minor }}.${{ needs.extract.outputs.patch }}
    runs-on:
      - self-hosted
      - java
    steps:
      # NOTE: by default checkout will get the revision at workflow trigger time. Here we want the latest (including commits from previous jobs), that's why we need the fetch-depth and pull
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Pull latest changes
        run: |
          git pull origin ${{ github.ref_name }}
      - name: Setup git author information
        run: |
          git config user.name RCSBSystem
          git config user.email it@rcsb.org
      - name: Increment version
        run: |
          NEXT_PATCH=$(mvn build-helper:parse-version help:evaluate -Dexpression=parsedVersion.nextIncrementalVersion -q -DforceStdout --no-transfer-progress)
          mvn versions:set -DnewVersion="${{ inputs.major }}.${{ inputs.minor }}.$NEXT_PATCH-SNAPSHOT" -DallowSnapshots --no-transfer-progress
      - name: Commit new version for next dev cycle
        run: |
          git add $(find . -name "pom.xml")
          git commit -m "[actions] Next development cycle"
      - name: Push back to GitHub
        run: |
          git push --all
          git push origin $NEW_VERSION
