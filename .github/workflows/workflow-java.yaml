name: Java Workflow
# Standard workflow for any Java based projects built with Jib. Because the current RCSB Java applications are tightly coupled, production image release must be separately scheduled and deployed in tandem with other Java applications.

on:
  workflow_call:
    inputs:
      mainline_branch:
        type: string
        default: "master"
        description: "The mainline branch for the repo. Deployments to the staging and production environments are done only on push to this branch. Defaults to the master branch."
      docker_namespace:
        type: string
        default: "rcsb"
        description: "The Docker image namespace built by jib. Defaults to 'rcsb'."
      do_staging_build:
        type: string
        default: "false"
        description: "Build and push a staging tagged container image for this application on commits to the mainline_branch."
      do_production_build:
        type: string
        default: "true"
        description: "Build and push a production tagged container image for this application on commits to the mainline_branch."
  workflow_dispatch:
    inputs:
      mainline_branch:
        type: string
        default: "master"
        description: "The mainline branch for the repo. Deployments to the staging and production environments are done only on push to this branch. Defaults to the master branch."
      docker_namespace:
        type: string
        default: "rcsb"
        description: "The Docker image namespace built by jib. Defaults to 'rcsb'."
      do_staging_build:
        type: string
        default: "false"
        description: "Build and push a staging tagged container image for this application on commits to the mainline_branch."
      do_production_build:
        type: string
        default: "true"
        description: "Build and push a production tagged container image for this application on commits to the mainline_branch."

concurrency:
  group: ${{ github.ref }}
  # Put to true after the older buildlocker pipeline is decommissioned
  cancel-in-progress: false

jobs:
  debug:
    name: "Debug conditionals"
    runs-on:
      - "self-hosted"
      - "java"
    steps:
      - name: "Output inputs and refs"
        run: |
          echo "=== Check branch conditionals"
          echo "github.ref_name: ${{ github.ref_name }}"
          echo "inputs.mainline_branch: ${{ inputs.mainline_branch }}"
          echo "Is github.ref_name == inputs.mainline_branch: ${{ github.ref_name == inputs.mainline_branch }}"
          echo "=== Check event conditionals"
          echo "github.event_name: ${{ github.event_name }}"
          echo "Is github.event_name != 'pull_request': ${{ github.event_name != 'pull_request' }}"
          echo "=== Check environment conditionals"
          echo "inputs.do_staging_build: ${{ inputs.do_staging_build }}"
          echo "inputs.do_production_build: ${{ inputs.do_production_build }}"
  # Test projects
  test_mvn:
    name: "Run tests via mvn"
    uses: ./.github/workflows/run_mvn.yaml
    with:
      script: "test --no-transfer-progress"
      publish_surefire_test_report: true
  build_mvn:
    name: "Build project with mvn"
    uses: ./.github/workflows/run_mvn.yaml
    with:
      script: package
  extract:
    name: extract-version
    needs:
      - test_mvn
      - build_mvn
    runs-on:
      - self-hosted
      - java
    outputs:
      major: ${{ steps.major.outputs.major }}
      minor: ${{ steps.minor.outputs.minor }}
      patch: ${{ steps.patch.outputs.patch }}
    steps:
      - uses: actions/checkout@v4
      - id: major
        run: |
          echo ::set-output name=major::$(mvn build-helper:parse-version help:evaluate -Dexpression=parsedVersion.majorVersion -q -DforceStdout --no-transfer-progress)
      - id: minor
        run: |
          echo ::set-output name=minor::$(mvn build-helper:parse-version help:evaluate -Dexpression=parsedVersion.minorVersion -q -DforceStdout --no-transfer-progress)
      - id: patch
        run: |
          echo ::set-output name=patch::$(mvn build-helper:parse-version help:evaluate -Dexpression=parsedVersion.incrementalVersion -q -DforceStdout --no-transfer-progress)
  echo-version:
    runs-on: ubuntu-latest
    needs: extract
    steps:
      - run: echo ${{needs.extract.outputs.major}}.${{needs.extract.outputs.minor}}.${{needs.extract.outputs.patch}}
  # Push jib
  build_jib:
    name: "Build and push docker image with Jib"
    if: github.event_name != 'pull_request'
    needs: extract
    uses: ./.github/workflows/run_mvn.yaml
    with:
      script: package jib:build -Djib.to.tags=${{ github.ref_name }} -Djib.target.namespace=rcsb --no-transfer-progress -Dmaven.test.skip=true -Djib.httpTimeout=0
  # Staging jobs
  build_jib_staging:
    name: "Build docker image via jib with staging tag"
    if: |
      inputs.do_staging_build == 'true' &&
      github.ref_name == inputs.mainline_branch &&
      github.event_name != 'pull_request'
    needs:
      - test_mvn
      - build_mvn
    uses: ./.github/workflows/run_mvn.yaml
    with:
      script: package jib:build -Djib.to.tags=staging -Djib.target.namespace=rcsb --no-transfer-progress -Dmaven.test.skip=true -Djib.httpTimeout=0
  # Production jobs
  # TODO: Increment version of project through workflow. Add this step once we are ready to retire older workflow files.
  build_jib_production:
    name: "Build docker image via jib with production tag"
    if: |
      inputs.do_production_build == 'true' &&
      github.ref_name == inputs.mainline_branch &&
      github.event_name != 'pull_request'
    needs:
      - test_mvn
      - build_mvn
    uses: ./.github/workflows/run_mvn.yaml
    with:
      script: package jib:build -Djib.to.tags=production -Djib.target.namespace=rcsb --no-transfer-progress -Dmaven.test.skip=true -Djib.httpTimeout=0
